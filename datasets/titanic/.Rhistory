cluster_0 <- preds[preds$cluster == 0]
cluster_1 <- preds[preds$cluster == 1]
cluster_2 <- preds[preds$cluster == 2]
limiar_cluster <- c(.0, .0, .0)
getScore <- function(pred, label, limiar){
err <- sum(as.integer(ifelse((pred >= limiar & label == 1), 5, 0)))
err <- err + sum(as.integer(ifelse((pred < limiar & label == 1), -5, 0)))
err <- err + sum(as.integer(ifelse((pred >= limiar & label == 0), -25, 0)))
return(err)
}
predsCheck <- function(preds, labels, limiar) {
print("Predições com Limiar fixo")
fp     <- as.integer( sum(ifelse(preds >=  limiar & labels == 0, 1, 0) ) );
cat("n -25: ", fp,"\n")
fn     <- as.integer( sum(ifelse(preds <   limiar & labels == 1, 1, 0) ) );
cat("n -5: ", fn,"\n")
tp     <- as.integer( sum(ifelse(preds >=  limiar & labels == 1, 1, 0) ) );
cat("n 5: ", tp,"\n")
cat("Total $: ", (fp*-25)+(fn*-5)+(tp*5))
}
predsCheckInt <- function(preds, labels) {
print("Predições com Limiar dinânmico")
fp     <- as.integer( sum(ifelse(preds ==  1 & labels == 0, 1, 0) ) );
cat("n -25: ", fp,"\n")
fn     <- as.integer( sum(ifelse(preds == 0 & labels == 1, 1, 0) ) );
cat("n -5: ", fn,"\n")
tp     <- as.integer( sum(ifelse(preds == 1 & labels == 1, 1, 0) ) );
cat("n 5: ", tp,"\n")
cat("Total $: ", (fp*-25)+(fn*-5)+(tp*5))
}
best_score <- -99999
current_score <- 0
best_limiar <- 0.0
for (x in seq(0.00,0.99,0.01)) {
current_score <- getScore(cluster_0$Score, cluster_0$true, x)
if(current_score > best_score){
best_score <- current_score
best_limiar <- x
}
}
limiar_cluster[1] <- best_limiar
best_score <- -99999
current_score <- 0
best_limiar <- 0.0
for (x in seq(0.00,0.99,0.01)) {
current_score <- getScore(cluster_1$Score, cluster_1$true, x)
if(current_score > best_score){
best_score <- current_score
best_limiar <- x
}
}
limiar_cluster[2] <- best_limiar
best_score <- -99999
current_score <- 0
best_limiar <- 0.0
for (x in seq(0.00,0.99,0.01)) {
current_score <- getScore(cluster_2$Score, cluster_2$true, x)
if(current_score > best_score){
best_score <- current_score
best_limiar <- x
}
}
limiar_cluster[3] <- best_limiar
#cat("Score limiar fixo: ", getScore(preds$Score, train[,'fraud'], 0.5), "\n")
#predsCheck(preds$Score, train[,'fraud'])
cat("Score limiar/cluster: ",
getScore(cluster_0$Score, cluster_0$true, limiar_cluster[1]) +
getScore(cluster_1$Score, cluster_1$true, limiar_cluster[2]) +
getScore(cluster_2$Score, cluster_2$true, limiar_cluster[3]))
# ---------------------------------------------------------------------------
predsCheck(preds$Score, train$fraud, 0.73)
for (i in 1:nrow(train)) {
if(preds[i,"Score"] > limiar_cluster[as.integer(preds[i,"cluster"]) + 1]){
preds[i,"Score"] = 1
}else{
preds[i,"Score"] = 0
}
}
predsCheckInt(preds$Score, train$fraud)
# ---------------------------------------------------------------------------
predsTest <- fread("/home/mario/dmc2019/stk/felipe_stk_001_test.csv")
predsTest$Score <-  1/(1+ exp(-predsTest$Score))
clusterTest <- as.integer(test[,"cluster"])
clusterTest <- c(test[,"cluster"])
ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest + 1], 1, 0)
ifelse(predsTest[,"Score"] > limiar_cluster[as.integer(clusterTest) + 1], 1, 0)
clusterTest
clusterTest <- as.integer(test[,"cluster"])
clusterTest <- as.matrix(test[,"cluster"])
ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest + 1], 1, 0)
View(preds)
View(predsTest)
limiar_cluster[clusterTest + 1]
clusterTest
clusterTest[]
View(clusterTest)
ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest['cluster'] + 1], 1, 0)
ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest[,'cluster'] + 1], 1, 0)
clusterTest[,'cluster']
test[,"cluster"]
test[,"cluster"][]
test[,"cluster"][1]
test[,"cluster"][]
test[,"cluster"][]
test[,"cluster"][]
ifelse(predsTest[,"Score"] > limiar_cluster[test['cluster'][] + 1], 1, 0)
clusterTest <- as.numeric(test[,"cluster"])
clusterTest <- as.list(test[,"cluster"])
ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest + 1], 1, 0)
clusterTest
clusterTest[]
ifelse(predsTest[,"Score"] > limiar_cluster[test[[,"cluster"]] + 1], 1, 0)
as.double(test[,"cluster"])
ifelse(predsTest[,"Score"] > limiar_cluster[test[,"cluster"] + 1], 1, 0)
clusterTest <- c(test[,"cluster"])
clusterTest
clusterTest[3]
as.numeric(test[,"cluster"]))
as.numeric(test[,"cluster"])
as.double(test[,"cluster"])
c(test[,"cluster"])
clusterTest <- test$cluster
clusterTest
clusterTest[1]
ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest + 1], 1, 0)
View(predsTest)
predsTest <- ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest + 1], 1, 0)
predsTest
View(predsTest)
# ---------------------------------------------------------------------------
predsTest <- fread("/home/mario/dmc2019/stk/felipe_stk_001_test.csv")
predsTest$Score <-  1/(1+ exp(-predsTest$Score))
predsTest <- ifelse(predsTest[,"Score"] > limiar_cluster[test[,"cluster"] + 1], 1, 0)
clusterTest <- test$cluster
predsTest <- ifelse(predsTest[,"Score"] > limiar_cluster[clusterTest + 1], 1, 0)
View(predsTest)
(sumpredsTest$Score == 1)
sumpredsTest$Score == 1)
sum(predsTest$Score == 1)
sum(predsTest[,"Score"] == 1)
sum(predsTest[,"Score"] == 0)
names(predsTest)[1]
names(predsTest)[0]
names(predsTest)
names(predsTest)
predsTest
colnames(predsTest)
names(predsTest)[names(predsTest) == "Score"] <- "fraud"
View(predsTest)
colnames(predsTest)
names(predsTest)[names(predsTest) == "Score"] <- "fraud"
colnames(predsTest)
colnames(predsTest) <- "fraud"
View(predsTest)
fwrite(predsTest, file = paste("/home/mario/dmc2019/sub/Uni_Federal_alfenas_2.csv", sep=""))
train        <- fread("/home/mario/dmc2019/sub/Uni_Federal_alfenas_2.csv")
library(data.table)
train        <- fread("/home/mario/dmc2019/sub/Uni_Federal_alfenas_2.csv")
sub        <- fread("/home/mario/dmc2019/sub/Uni_Federal_alfenas_2.csv")
nrow(sub)
nrow(sub) + 1879
colnames(subn)
colnames(sub)
sum(sub['fraud'] == 1)
sub['fraud'] == 1
sub == 1
sum(sub == 1)
sum(sub == 0)
library(data.table)
sub        <- fread("/home/mario/dmc2019/sub/Uni_Federal_alfenas_2.csv")
sub        <- fread("/home/mario/dmc2019/sub/Uni_Federal_Alfenas_2.csv")
sum(sub == 1)
sum(sub == 1) - 22365
500000*0.05
cat("Cleaning memory\n");
rm(list = ls()); gc();
library(data.table);
library(xgboost);
library(Matrix);
target <- "readmitted";
train <- fread("home/mario/NetBeansProjects/ArvoreDeDecisao/diabetic_data.csv", na.strings = "?");
train <- fread("/home/mario/NetBeansProjects/ArvoreDeDecisao/datasets/diabetic_data.csv", na.strings = "?");
#dropping because I cannot use the same user in differfent folds in the CV process.
#without dropping these values, your CV will improve. As we do not have timestamp information, I have decided to drop these two columns to be realistic.
train$encounter_id <- NULL;
train$patient_nbr <- NULL;
train$race <- as.numeric(as.factor(train$race));
train$age <- ifelse(train$age == "[0-10)",  0, train$age);
train$age <- ifelse(train$age == "[10-20)", 10, train$age);
train$age <- ifelse(train$age == "[20-30)", 20, train$age);
train$age <- ifelse(train$age == "[30-40)", 30, train$age);
train$age <- ifelse(train$age == "[40-50)", 40, train$age);
train$age <- ifelse(train$age == "[50-60)", 50, train$age);
train$age <- ifelse(train$age == "[60-70)", 60, train$age);
train$age <- ifelse(train$age == "[70-80)", 70, train$age);
train$age <- ifelse(train$age == "[80-90)", 80, train$age);
train$age <- ifelse(train$age == "[90-100)", 90, train$age);
train$age <- as.numeric(train$age);
train$gender <- as.numeric(as.factor(train$gender));
train$weight <- ifelse(train$weight == "[75-100)",  75, train$weight);
train$weight <- ifelse(train$weight == "[50-75)",   50, train$weight);
train$weight <- ifelse(train$weight == "[25-50)",   25, train$weight);
train$weight <- ifelse(train$weight == "[0-25)",    0, train$weight);
train$weight <- ifelse(train$weight == "[100-125)", 100, train$weight);
train$weight <- ifelse(train$weight == "[125-150)", 125, train$weight);
train$weight <- ifelse(train$weight == "[150-175)", 150, train$weight);
train$weight <- ifelse(train$weight == "[175-200)", 175, train$weight);
train$weight <- ifelse(train$weight == ">200",      -25, train$weight);
train$weight <- as.numeric(train$weight);
train$admission_type_id <- as.numeric(as.factor(train$admission_type_id));
train$discharge_disposition_id <- as.numeric(as.factor(train$discharge_disposition_id));
train$admission_source_id <- as.numeric(as.factor(train$admission_source_id));
train$time_in_hospital <- as.numeric(train$time_in_hospital);
train$payer_code <- as.numeric(as.factor(train$payer_code));
train$medical_specialty <- as.numeric(as.factor(train$medical_specialty));
train$num_lab_procedures <- as.numeric(train$num_lab_procedures);
train$num_procedures <- as.numeric(train$num_procedures);
train$num_medications <- as.numeric(train$num_medications);
train$number_outpatient <- as.numeric(train$number_outpatient);
train$number_emergency <- as.numeric(train$number_emergency);
train$number_inpatient <- as.numeric(train$number_inpatient);
train$diag_1 <- as.numeric(as.factor(train$diag_1));
train$diag_2 <- as.numeric(as.factor(train$diag_2));
train$diag_3 <- as.numeric(as.factor(train$diag_3));
train$number_diagnoses <- as.numeric(train$number_diagnoses);
train$max_glu_serum <- ifelse(train$max_glu_serum == "None",  0, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == "Norm",  100, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == ">200",  200, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == ">300",  300, train$max_glu_serum);
train$max_glu_serum <- as.numeric(train$max_glu_serum);
train$A1Cresult <- ifelse(train$A1Cresult == "None",  0, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == "Norm",  5, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == ">7",    7, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == ">8",    8, train$A1Cresult);
train$A1Cresult <- as.numeric(train$A1Cresult);
columns <- c("metformin", "repaglinide", "nateglinide", "chlorpropamide", "glimepiride", "acetohexamide", "glipizide", "glyburide", "tolbutamide", "pioglitazone", "rosiglitazone", "acarbose", "miglitol", "troglitazone", "tolazamide", "examide", "citoglipton", "insulin", "glyburide-metformin", "glipizide-metformin", "glimepiride-pioglitazone", "metformin-rosiglitazone", "metformin-pioglitazone");
for( c in columns ){
train[[c]] <- ifelse(train[[c]] == "Up",     +10, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "Down",   -10, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "Steady", +0, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "No",     -20, train[[c]]);
train[[c]] <- as.numeric(train[[c]]);
}
train$change <- ifelse(train$change == "No", -1, train$change);
train$change <- ifelse(train$change == "Ch", +1, train$change);
train$change <- as.numeric(train$change);
train$diabetesMed <- ifelse(train$diabetesMed == "Yes", +1, train$diabetesMed);
train$diabetesMed <- ifelse(train$diabetesMed == "No",  -1, train$diabetesMed);
train$diabetesMed <- as.numeric(train$diabetesMed);
train$readmitted <- ifelse(train$readmitted != "NO", 1, 0); # ">30", "<30", "NO"
train$readmitted <- as.numeric(train$readmitted);
train[] <- lapply(train, as.numeric);
train.y <- train[[target]];
train[[target]] <- NULL;
gc();
dtrain <- xgb.DMatrix(as.matrix(train), label = train.y, missing = NA);
watchlist <- list(train = dtrain);
param <- list(
objective           = "reg:logistic",
booster             = "gbtree",
eta                 = 0.03,
max_depth           = 5,
eval_metric         = "auc",
min_child_weight    = 150,
alpha               = 0.00,
subsample           = 0.70,
colsample_bytree    = 0.70
);
set.seed(1981);
clf <- xgb.cv(  params                = param,
data                  = dtrain,
nrounds               = 20000,
verbose               = 1,
watchlist             = watchlist,
maximize              = TRUE,
nfold                 = 5,
nthread               = 4,
print_every_n         = 50,
stratified            = TRUE,
early_stopping_rounds = 10
);
##################################
#    Author: Humberto Brandão    #
##################################
# http://www.humbertobrandao.com #
# http://www.kaggle.com/brandao  #
##################################
cat("Cleaning memory\n");
rm(list = ls()); gc();
library(data.table);
library(xgboost);
library(Matrix);
target <- "readmitted";
train <- fread("/home/mario/NetBeansProjects/ArvoreDeDecisao/datasets/diabetic_data.csv", na.strings = "?");
#dropping because I cannot use the same user in differfent folds in the CV process.
#without dropping these values, your CV will improve. As we do not have timestamp information, I have decided to drop these two columns to be realistic.
train$encounter_id <- NULL;
train$patient_nbr <- NULL;
train$race <- as.numeric(as.factor(train$race));
train$age <- ifelse(train$age == "[0-10)",  0, train$age);
train$age <- ifelse(train$age == "[10-20)", 10, train$age);
train$age <- ifelse(train$age == "[20-30)", 20, train$age);
train$age <- ifelse(train$age == "[30-40)", 30, train$age);
train$age <- ifelse(train$age == "[40-50)", 40, train$age);
train$age <- ifelse(train$age == "[50-60)", 50, train$age);
train$age <- ifelse(train$age == "[60-70)", 60, train$age);
train$age <- ifelse(train$age == "[70-80)", 70, train$age);
train$age <- ifelse(train$age == "[80-90)", 80, train$age);
train$age <- ifelse(train$age == "[90-100)", 90, train$age);
train$age <- as.numeric(train$age);
train$gender <- as.numeric(as.factor(train$gender));
train$weight <- ifelse(train$weight == "[75-100)",  75, train$weight);
train$weight <- ifelse(train$weight == "[50-75)",   50, train$weight);
train$weight <- ifelse(train$weight == "[25-50)",   25, train$weight);
train$weight <- ifelse(train$weight == "[0-25)",    0, train$weight);
train$weight <- ifelse(train$weight == "[100-125)", 100, train$weight);
train$weight <- ifelse(train$weight == "[125-150)", 125, train$weight);
train$weight <- ifelse(train$weight == "[150-175)", 150, train$weight);
train$weight <- ifelse(train$weight == "[175-200)", 175, train$weight);
train$weight <- ifelse(train$weight == ">200",      -25, train$weight);
train$weight <- as.numeric(train$weight);
train$admission_type_id <- as.numeric(as.factor(train$admission_type_id));
train$discharge_disposition_id <- as.numeric(as.factor(train$discharge_disposition_id));
train$admission_source_id <- as.numeric(as.factor(train$admission_source_id));
train$time_in_hospital <- as.numeric(train$time_in_hospital);
train$payer_code <- as.numeric(as.factor(train$payer_code));
train$medical_specialty <- as.numeric(as.factor(train$medical_specialty));
train$num_lab_procedures <- as.numeric(train$num_lab_procedures);
train$num_procedures <- as.numeric(train$num_procedures);
train$num_medications <- as.numeric(train$num_medications);
train$number_outpatient <- as.numeric(train$number_outpatient);
train$number_emergency <- as.numeric(train$number_emergency);
train$number_inpatient <- as.numeric(train$number_inpatient);
train$diag_1 <- as.numeric(as.factor(train$diag_1));
train$diag_2 <- as.numeric(as.factor(train$diag_2));
train$diag_3 <- as.numeric(as.factor(train$diag_3));
train$number_diagnoses <- as.numeric(train$number_diagnoses);
train$max_glu_serum <- ifelse(train$max_glu_serum == "None",  0, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == "Norm",  100, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == ">200",  200, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == ">300",  300, train$max_glu_serum);
train$max_glu_serum <- as.numeric(train$max_glu_serum);
train$A1Cresult <- ifelse(train$A1Cresult == "None",  0, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == "Norm",  5, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == ">7",    7, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == ">8",    8, train$A1Cresult);
train$A1Cresult <- as.numeric(train$A1Cresult);
columns <- c("metformin", "repaglinide", "nateglinide", "chlorpropamide", "glimepiride", "acetohexamide", "glipizide", "glyburide", "tolbutamide", "pioglitazone", "rosiglitazone", "acarbose", "miglitol", "troglitazone", "tolazamide", "examide", "citoglipton", "insulin", "glyburide-metformin", "glipizide-metformin", "glimepiride-pioglitazone", "metformin-rosiglitazone", "metformin-pioglitazone");
for( c in columns ){
train[[c]] <- ifelse(train[[c]] == "Up",     +10, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "Down",   -10, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "Steady", +0, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "No",     -20, train[[c]]);
train[[c]] <- as.numeric(train[[c]]);
}
train$change <- ifelse(train$change == "No", -1, train$change);
train$change <- ifelse(train$change == "Ch", +1, train$change);
train$change <- as.numeric(train$change);
train$diabetesMed <- ifelse(train$diabetesMed == "Yes", +1, train$diabetesMed);
train$diabetesMed <- ifelse(train$diabetesMed == "No",  -1, train$diabetesMed);
train$diabetesMed <- as.numeric(train$diabetesMed);
train$readmitted <- ifelse(train$readmitted != "NO", 1, 0); # ">30", "<30", "NO"
train$readmitted <- as.numeric(train$readmitted);
train[] <- lapply(train, as.numeric);
train.y <- train[[target]];
train[[target]] <- NULL;
gc();
dtrain <- xgb.DMatrix(as.matrix(train), label = train.y, missing = NA);
watchlist <- list(train = dtrain);
View(train)
##################################
#    Author: Humberto Brandão    #
##################################
# http://www.humbertobrandao.com #
# http://www.kaggle.com/brandao  #
##################################
cat("Cleaning memory\n");
rm(list = ls()); gc();
library(data.table);
library(xgboost);
library(Matrix);
target <- "readmitted";
train <- fread("/home/mario/NetBeansProjects/ArvoreDeDecisao/datasets/diabetic_data.csv", na.strings = "?");
#dropping because I cannot use the same user in differfent folds in the CV process.
#without dropping these values, your CV will improve. As we do not have timestamp information, I have decided to drop these two columns to be realistic.
train$encounter_id <- NULL;
train$patient_nbr <- NULL;
train$race <- as.numeric(as.factor(train$race));
train$age <- ifelse(train$age == "[0-10)",  0, train$age);
train$age <- ifelse(train$age == "[10-20)", 10, train$age);
train$age <- ifelse(train$age == "[20-30)", 20, train$age);
train$age <- ifelse(train$age == "[30-40)", 30, train$age);
train$age <- ifelse(train$age == "[40-50)", 40, train$age);
train$age <- ifelse(train$age == "[50-60)", 50, train$age);
train$age <- ifelse(train$age == "[60-70)", 60, train$age);
train$age <- ifelse(train$age == "[70-80)", 70, train$age);
train$age <- ifelse(train$age == "[80-90)", 80, train$age);
train$age <- ifelse(train$age == "[90-100)", 90, train$age);
train$age <- as.numeric(train$age);
train$gender <- as.numeric(as.factor(train$gender));
train$weight <- ifelse(train$weight == "[75-100)",  75, train$weight);
train$weight <- ifelse(train$weight == "[50-75)",   50, train$weight);
train$weight <- ifelse(train$weight == "[25-50)",   25, train$weight);
train$weight <- ifelse(train$weight == "[0-25)",    0, train$weight);
train$weight <- ifelse(train$weight == "[100-125)", 100, train$weight);
train$weight <- ifelse(train$weight == "[125-150)", 125, train$weight);
train$weight <- ifelse(train$weight == "[150-175)", 150, train$weight);
train$weight <- ifelse(train$weight == "[175-200)", 175, train$weight);
train$weight <- ifelse(train$weight == ">200",      -25, train$weight);
train$weight <- as.numeric(train$weight);
train$admission_type_id <- as.numeric(as.factor(train$admission_type_id));
train$discharge_disposition_id <- as.numeric(as.factor(train$discharge_disposition_id));
train$admission_source_id <- as.numeric(as.factor(train$admission_source_id));
train$time_in_hospital <- as.numeric(train$time_in_hospital);
train$payer_code <- as.numeric(as.factor(train$payer_code));
train$medical_specialty <- as.numeric(as.factor(train$medical_specialty));
train$num_lab_procedures <- as.numeric(train$num_lab_procedures);
train$num_procedures <- as.numeric(train$num_procedures);
train$num_medications <- as.numeric(train$num_medications);
train$number_outpatient <- as.numeric(train$number_outpatient);
train$number_emergency <- as.numeric(train$number_emergency);
train$number_inpatient <- as.numeric(train$number_inpatient);
train$diag_1 <- as.numeric(as.factor(train$diag_1));
train$diag_2 <- as.numeric(as.factor(train$diag_2));
train$diag_3 <- as.numeric(as.factor(train$diag_3));
train$number_diagnoses <- as.numeric(train$number_diagnoses);
train$max_glu_serum <- ifelse(train$max_glu_serum == "None",  0, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == "Norm",  100, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == ">200",  200, train$max_glu_serum);
train$max_glu_serum <- ifelse(train$max_glu_serum == ">300",  300, train$max_glu_serum);
train$max_glu_serum <- as.numeric(train$max_glu_serum);
train$A1Cresult <- ifelse(train$A1Cresult == "None",  0, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == "Norm",  5, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == ">7",    7, train$A1Cresult);
train$A1Cresult <- ifelse(train$A1Cresult == ">8",    8, train$A1Cresult);
train$A1Cresult <- as.numeric(train$A1Cresult);
columns <- c("metformin", "repaglinide", "nateglinide", "chlorpropamide", "glimepiride", "acetohexamide", "glipizide", "glyburide", "tolbutamide", "pioglitazone", "rosiglitazone", "acarbose", "miglitol", "troglitazone", "tolazamide", "examide", "citoglipton", "insulin", "glyburide-metformin", "glipizide-metformin", "glimepiride-pioglitazone", "metformin-rosiglitazone", "metformin-pioglitazone");
for( c in columns ){
train[[c]] <- ifelse(train[[c]] == "Up",     +10, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "Down",   -10, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "Steady", +0, train[[c]]);
train[[c]] <- ifelse(train[[c]] == "No",     -20, train[[c]]);
train[[c]] <- as.numeric(train[[c]]);
}
train$change <- ifelse(train$change == "No", -1, train$change);
train$change <- ifelse(train$change == "Ch", +1, train$change);
train$change <- as.numeric(train$change);
train$diabetesMed <- ifelse(train$diabetesMed == "Yes", +1, train$diabetesMed);
train$diabetesMed <- ifelse(train$diabetesMed == "No",  -1, train$diabetesMed);
train$diabetesMed <- as.numeric(train$diabetesMed);
train$readmitted <- ifelse(train$readmitted != "NO", 1, 0); # ">30", "<30", "NO"
train$readmitted <- as.numeric(train$readmitted);
train[] <- lapply(train, as.numeric);
train.y <- train[[target]];
#train[[target]] <- NULL;
gc();
dtrain <- xgb.DMatrix(as.matrix(train), label = train.y, missing = NA);
watchlist <- list(train = dtrain);
View(train)
?fwrite
#train[[target]] <- NULL;
fwrite(train, file = paste("/home/mario/NetBeansProjects/ArvoreDeDecisao/datasets/diabetic_data.csv", sep=","))
setwd("~/NetBeansProjects/ArvoreDeDecisao/datasets/titanic")
train<-read.csv('/input/train.csv',stringsAsFactors=FALSE)
train<-read.csv('/train.csv',stringsAsFactors=FALSE)
setwd("~/NetBeansProjects/ArvoreDeDecisao/datasets/titanic")
train<-read.csv('train.csv',stringsAsFactors=FALSE)
test<-read.csv('test.csv',stringsAsFactors=FALSE)
extractFeatures <- function(data, istrain=TRUE) {
features <- c("Pclass",
"Sex",
"Age",
"SibSp",
"Parch",
"Fare",
"Cabin",
"Embarked")
fea <- data[,features]
fea$Sex[is.na(fea$Sex)] <- "female"
fea$Embarked[fea$Embarked==""] = "S"
fea$Sex <- fea$Sex[fea$Sex == "male"] <- "1"
fea$Sex <- fea$Sex[fea$Sex == "female"] <- "0"
fea$Sex<-as.numeric(as.character(fea$Sex))
fea$Embarked[fea$Embarked=="S"] <- "0"
fea$Embarked[fea$Embarked=="Q"] <- "1"
fea$Embarked[fea$Embarked=="C"] <- "2"
fea[substr(fea$Cabin,0,1)=="A", "Cabin"] <-"1"
fea[substr(fea$Cabin,0,1)=="B", "Cabin"] <-"2"
fea[substr(fea$Cabin,0,1)=="C", "Cabin"] <-"3"
fea[substr(fea$Cabin,0,1)=="D", "Cabin"] <-"4"
fea[substr(fea$Cabin,0,1)=="E", "Cabin"] <-"5"
fea[substr(fea$Cabin,0,1)=="F", "Cabin"] <-"6"
fea[substr(fea$Cabin,0,1)=="G", "Cabin"] <-"7"
fea[substr(fea$Cabin,0,1)=="T", "Cabin"] <-"8"
fea[length(fea$Cabin)==0, "Cabin"] <-"0"
fea$Cabin<-as.numeric(fea$Cabin)
fea[is.na(fea)] <- 0
fea[] <- lapply(fea, function(x) as.numeric(as.character(x)))
if(istrain)
fea$Survived <- as.numeric(data$Survived)
return(fea)
}
xtrain <-extractFeatures(train,TRUE)
xtest <-extractFeatures(test,FALSE)
fwrite(xtrain, file = "/datasets/titanic/reshaped_train.csv"))
fwrite(xtrain, file = "/reshaped_train.csv"))
fwrite(xtrain, file = "reshaped_train.csv"))
fwrite(xtrain, file = "reshaped_train.csv")
library(data.table);
fwrite(xtrain, file = "reshaped_train.csv")
fwrite(xtest, file = "reshaped_test.csv")
View(xtrain)
